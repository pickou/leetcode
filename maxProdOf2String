/*
Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.

Example 1:
Given ["abcw", "baz", "foo", "bar", "xtfn", "abcdef"]
Return 16
The two words can be "abcw", "xtfn".

*/

// use hash and bit manipulation to compare two string

class Solution {
public:
    int maxProduct(vector<string>& words) {
        int wordsNum = words.size();
        if(wordsNum==0||wordsNum==1) return 0;
        int product=0, maxProd=0;
        vector<int> mask(wordsNum, 0);
        for(int i=0; i<wordsNum; i++)
            for(char ch: words[i])
                mask[i] |= 1<<(ch-'a');
        
        for(int i=0; i<wordsNum-1; i++) {
            for(int j=i+1; j<wordsNum; j++) {
                if(!(mask[i]&mask[j])) {
                    product = words[i].length()*words[j].length();
                    if(product>maxProd) maxProd = product;
                }
            }
        }
    return maxProd;
    }
};
